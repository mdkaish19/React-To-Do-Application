TaskList.js

one more button for sharing to the otherplarform.

import React from 'react';
import TaskInput from './components/TaskInput';
import TaskList from './components/TaskList';
import { Provider, useSelector, useDispatch } from 'react-redux';
import store from './store';
import jsPDF from 'jspdf'; // Import jsPDF library
import { clearTasks } from './components/TaskAction';
import './App.css'; // Import CSS file

const ShareButton = () => {
  const tasks = useSelector((state) => state.tasks);
  const dispatch = useDispatch();

  const generateShareLink = () => {
    const taskList = tasks.map((task, index) => `${index + 1}. ${task.text}`).join('\n');
    const encodedText = encodeURIComponent(`Here are my tasks List:\n${taskList}`);
    return `https://wa.me/?text=${encodedText}`;
  };

  const handleShareLink = () => {
    if (tasks.length === 0) {
      alert('Please add tasks to the list before sharing...');
    } else {
      const shareLink = generateShareLink();
      window.open(shareLink, '_blank');
    }
  };

  const handleShareToOtherApps = () => {
    if (tasks.length === 0) {
      alert('Please add tasks to the list before sharing...');
    } else {
      const taskList = tasks.map((task, index) => `${index + 1}. ${task.text}`).join('\n');
      if (navigator.share) {
        navigator.share({
          title: 'My To-Do List',
          text: `Here are my tasks List:\n${taskList}`,
          url: window.location.href,
        }).catch((error) => console.error('Error sharing:', error));
      } else {
        alert('Web Share API is not supported in your browser.');
      }
    }
  };

  const generatePDF = () => {
    if (tasks.length === 0) {
      alert('Please add tasks to the list before downloading...');
    } else {
      const doc = new jsPDF();
      doc.setFontSize(12);
      doc.text("My To-Do Tasks", 10, 10);
      tasks.forEach((task, index) => {
        doc.text(`${index + 1}. ${task.text}`, 10, 20 + (index * 10));
      });
      doc.save("tasks.pdf");
    }
  };

  const handleClearTasks = () => {
    if (tasks.length === 0) {
      alert('There are no tasks to clear.');
    } else if (window.confirm('Are you sure you want to clear all tasks?')) {
      dispatch(clearTasks());
    }
  };

  return (
    <div className="share-container">
      <button className="share-btn" onClick={handleShareLink}>Share on WhatsApp</button>
      <button className="share-btn" onClick={handleShareToOtherApps}>Share to Other Apps</button>
      <button className="download-btn" onClick={generatePDF}>Download PDF</button>
      <button className="clear-btn" onClick={handleClearTasks}>Clear All Tasks</button>
    </div>
  );
};

function App() {
  return (
    <Provider store={store}>
      <div className="container">
        <h1>My To-Do Application</h1>
        <TaskInput />
        <TaskList />
        <ShareButton />
        <footer>&copy; 2024 Md Kaish. All rights reserved.</footer>
      </div>
    </Provider>
  );
}

export default App;


Both code are for the checkbox and task completed

import React, { useState, useRef, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { deleteTask, updateTask } from '../components/TaskAction'; // Assuming you have an updateTask action

const TaskList = () => {
  const tasks = useSelector((state) => state.tasks);
  const dispatch = useDispatch();
  const [updatedText, setUpdatedText] = useState('');
  const [isEditing, setIsEditing] = useState(null); // State to track if editing is enabled for a task
  const inputRef = useRef(null); // Ref for the input element
  const [checkedTasks, setCheckedTasks] = useState(() => {
    // Initialize checked tasks from localStorage or empty array
    const storedCheckedTasks = localStorage.getItem('checkedTasks');
    return storedCheckedTasks ? JSON.parse(storedCheckedTasks) : [];
  });

  const handleDelete = (id) => {
    const confirmDelete = window.confirm('Are you sure you want to delete this task...?');
    if (confirmDelete) {
      dispatch(deleteTask(id));
      setCheckedTasks(checkedTasks.filter(taskId => taskId !== id)); // Remove deleted task from checkedTasks
    }
  };

  const handleUpdate = (task) => {
    if (updatedText.trim() !== '') {
      dispatch(updateTask(task.id, updatedText));
      setUpdatedText(''); // Clear the input after update
      setIsEditing(null); // Disable editing after update
    }
  };

  const handleEditClick = (task) => {
    setUpdatedText(task.text); // Set the updatedText state with the current task's text
    setIsEditing(task.id); // Enable editing for this task
  };

  const handleKeyPress = (event, task) => {
    if (event.key === 'Enter') {
      handleUpdate(task); // Call handleUpdate when Enter key is pressed
    }
  };

  useEffect(() => {
    if (inputRef.current && isEditing !== null) {
      inputRef.current.focus(); // Focus on the input when isEditing is not null
    }
  }, [isEditing]);

  const handleCheckboxChange = (taskId) => {
    if (checkedTasks.includes(taskId)) {
      setCheckedTasks(checkedTasks.filter(id => id !== taskId)); // Remove task from checkedTasks if unchecked
    } else {
      setCheckedTasks([...checkedTasks, taskId]); // Add task to checkedTasks if checked
    }
  };

  useEffect(() => {
    localStorage.setItem('checkedTasks', JSON.stringify(checkedTasks)); // Update localStorage when checkedTasks change
  }, [checkedTasks]);

  const activeTasks = tasks.filter(task => !checkedTasks.includes(task.id));
  const completedTasks = tasks.filter(task => checkedTasks.includes(task.id));

  return (
    <div className="container">
      <h2>Task List</h2>
      <ul>
        {activeTasks.map((task, index) => ( // Added 'index' for numbering
          <li key={task.id}>
            <label className="checkbox-label">
              <input
                type="checkbox"
                checked={checkedTasks.includes(task.id)}
                onChange={() => handleCheckboxChange(task.id)}
              />
              <span className="checkbox-custom"></span>
            </label>
            <span className="item-number">{index + 1}.</span> {/* Item number with spacing */}
            {isEditing === task.id ? (
              <>
                <input
                  ref={inputRef}
                  type="text"
                  value={updatedText}
                  onChange={(e) => setUpdatedText(e.target.value)}
                  onKeyDown={(e) => handleKeyPress(e, task)}
                  placeholder="Enter updated task"
                />
                <button className="save-btn" onClick={() => handleUpdate(task)}>Save</button>
              </>
            ) : (
              <>
                <span className="item-text">{task.text}</span> {/* Item text with spacing */}
                <button className="update-btn" onClick={() => handleEditClick(task)}>Update</button>
                <button className="delete-btn" onClick={() => handleDelete(task.id)}>Delete</button>
              </>
            )}
          </li>
        ))}
      </ul>
      <h2>Task Completed</h2>
      <ul>
        {completedTasks.map((task, index) => (
          <li key={task.id}>
            <label className="checkbox-label">
              <input
                type="checkbox"
                checked={checkedTasks.includes(task.id)}
                onChange={() => handleCheckboxChange(task.id)}
              />
              <span className="checkbox-custom"></span>
            </label>
            <span className="item-number">{index + 1}.</span> {/* Item number with spacing */}
            <span className="item-text">{task.text}</span>
            <button className="delete-btn" onClick={() => handleDelete(task.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TaskList;

// import React, { useState, useRef, useEffect } from 'react';
// import { useSelector, useDispatch } from 'react-redux';
// import { deleteTask, updateTask } from '../components/TaskAction'; // Assuming you have an updateTask action

// const TaskList = () => {
//   const tasks = useSelector((state) => state.tasks);
//   const dispatch = useDispatch();
//   const [updatedText, setUpdatedText] = useState('');
//   const [isEditing, setIsEditing] = useState(null); // State to track if editing is enabled for a task
//   const inputRef = useRef(null); // Ref for the input element
//   const [checkedTasks, setCheckedTasks] = useState(() => {
//     // Initialize checked tasks from localStorage or empty array
//     const storedCheckedTasks = localStorage.getItem('checkedTasks');
//     return storedCheckedTasks ? JSON.parse(storedCheckedTasks) : [];
//   });

//   const [completedTasks, setCompletedTasks] = useState(() => {
//     // Initialize completed tasks from localStorage or empty array
//     const storedCompletedTasks = localStorage.getItem('completedTasks');
//     return storedCompletedTasks ? JSON.parse(storedCompletedTasks) : [];
//   });

//   const handleDelete = (id) => {
//     const confirmDelete = window.confirm('Are you sure you want to delete this task...?');
//     if (confirmDelete) {
//       dispatch(deleteTask(id));
//       setCheckedTasks(checkedTasks.filter(taskId => taskId !== id)); // Remove deleted task from checkedTasks
//       setCompletedTasks(completedTasks.filter(taskId => taskId !== id)); // Remove deleted task from completedTasks
//     }
//   };

//   const handleUpdate = (task) => {
//     if (updatedText.trim() !== '') {
//       dispatch(updateTask(task.id, updatedText));
//       setUpdatedText(''); // Clear the input after update
//       setIsEditing(null); // Disable editing after update
//     }
//   };

//   const handleEditClick = (task) => {
//     setUpdatedText(task.text); // Set the updatedText state with the current task's text
//     setIsEditing(task.id); // Enable editing for this task
//   };

//   const handleKeyPress = (event, task) => {
//     if (event.key === 'Enter') {
//       handleUpdate(task); // Call handleUpdate when Enter key is pressed
//     }
//   };

//   useEffect(() => {
//     if (inputRef.current && isEditing !== null) {
//       inputRef.current.focus(); // Focus on the input when isEditing is not null
//     }
//   }, [isEditing]);

//   const handleCheckboxChange = (taskId, isCompleted) => {
//     if (isCompleted) {
//       setCompletedTasks(completedTasks.filter(id => id !== taskId)); // Move task from completed to tasks
//       setCheckedTasks(checkedTasks.filter(id => id !== taskId)); // Remove from checkedTasks if unchecked
//     } else {
//       setCompletedTasks([...completedTasks, taskId]); // Move task from tasks to completed
//       setCheckedTasks([...checkedTasks, taskId]); // Add to checkedTasks if checked
//     }
//   };

//   useEffect(() => {
//     localStorage.setItem('checkedTasks', JSON.stringify(checkedTasks)); // Update localStorage when checkedTasks change
//     localStorage.setItem('completedTasks', JSON.stringify(completedTasks)); // Update localStorage when completedTasks change
//   }, [checkedTasks, completedTasks]);

//   const renderTaskList = (tasks, isCompleted) => (
//     <ul>
//       {tasks.map((task, index) => (
//         <li key={task.id}>
//           <label className="checkbox-label">
//             <input
//               type="checkbox"
//               checked={checkedTasks.includes(task.id)}
//               onChange={() => handleCheckboxChange(task.id, isCompleted)}
//             />
//             <span className="checkbox-custom"></span>
//           </label>
//           <span className="item-number">{index + 1}.</span>
//           {isEditing === task.id ? (
//             <>
//               <input
//                 ref={inputRef}
//                 type="text"
//                 value={updatedText}
//                 onChange={(e) => setUpdatedText(e.target.value)}
//                 onKeyDown={(e) => handleKeyPress(e, task)}
//                 placeholder="Enter updated task"
//               />
//               <button className="save-btn" onClick={() => handleUpdate(task)}>Save</button>
//             </>
//           ) : (
//             <>
//               <span className="item-text">{task.text}</span>
//               <div className="task-actions">
//                 <button className="update-btn" onClick={() => handleEditClick(task)}>Update</button>
//                 <button className="delete-btn" onClick={() => handleDelete(task.id)}>Delete</button>
//               </div>
//             </>
//           )}
//         </li>
//       ))}
//     </ul>
//   );

//   const activeTasks = tasks.filter(task => !completedTasks.includes(task.id));
//   const completedTaskDetails = tasks.filter(task => completedTasks.includes(task.id));

//   return (
//     <div className="container">
//       <h2>Task List</h2>
//       {renderTaskList(activeTasks, false)}
//       <h2>Task Completed</h2>
//       {renderTaskList(completedTaskDetails, true)}
//     </div>
//   );
// };

// export default TaskList;