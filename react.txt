TaskList.js


import React, { useState, useRef, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { deleteTask, updateTask } from '../components/TaskAction'; // Assuming you have an updateTask action

const TaskList = () => {
  const tasks = useSelector((state) => state.tasks);
  const dispatch = useDispatch();
  const [updatedText, setUpdatedText] = useState('');
  const [isEditing, setIsEditing] = useState(null); // State to track if editing is enabled for a task
  const inputRef = useRef(null); // Ref for the input element

  const handleDelete = (id) => {
    dispatch(deleteTask(id));
  };

  const handleUpdate = (task) => {
  if (updatedText.trim() !== '') {
    dispatch(updateTask(task.id, updatedText));
    setUpdatedText(''); // Clear the input after update
    setIsEditing(null); // Disable editing after update
  }
};

  const handleKeyPress = (event, task) => {
    if (event.key === 'Enter') {
      handleUpdate(task); // Call handleUpdate when Enter key is pressed
    }
  };

  useEffect(() => {
    if (inputRef.current && isEditing !== null) {
      inputRef.current.focus(); // Focus on the input when isEditing is not null
    }
  }, [isEditing]);

  return (
    <div className="container">
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>
            {/* Use CSS for bullet points */}
            {isEditing === task.id ? (
              <>
                <input
                  ref={inputRef}
                  type="text"
                  value={updatedText}
                  onChange={(e) => setUpdatedText(e.target.value)}
                  onKeyDown={(e) => handleKeyPress(e, task)} // Call handleKeyPress on key press
                  placeholder="Enter updated task"
                />
                <button className="save-btn" onClick={() => handleUpdate(task)}>Save</button>
              </>
            ) : (
              <>
                <span style={{ marginRight: '8px' }}>{task.text}</span>
                <button className="update-btn" onClick={() => setIsEditing(task.id)}>Update</button>
                <span style={{ marginRight: '8px' }}>{}</span>
                <button onClick={() => handleDelete(task.id)}>Delete</button>
              </>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TaskList;

second one:-

import React, { useState, useRef, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { deleteTask, updateTask } from '../components/TaskAction'; // Assuming you have an updateTask action

const TaskList = () => {
  const tasks = useSelector((state) => state.tasks);
  const dispatch = useDispatch();
  const [updatedText, setUpdatedText] = useState('');
  const [isEditing, setIsEditing] = useState(null); // State to track if editing is enabled for a task
  const inputRef = useRef(null); // Ref for the input element

  const handleDelete = (id) => {
    const confirmDelete = window.confirm('Are you sure you want to delete this item?');
    if (confirmDelete) {
      dispatch(deleteTask(id));
    }
  };

  const handleUpdate = (task) => {
    if (updatedText.trim() !== '') {
      dispatch(updateTask(task.id, updatedText));
      setUpdatedText(''); // Clear the input after update
      setIsEditing(null); // Disable editing after update
    }
  };

  const handleEditClick = (task) => {
    setUpdatedText(task.text); // Set the updatedText state with the current task's text
    setIsEditing(task.id); // Enable editing for this task
  };

  const handleKeyPress = (event, task) => {
    if (event.key === 'Enter') {
      handleUpdate(task); // Call handleUpdate when Enter key is pressed
    }
  };

  useEffect(() => {
    if (inputRef.current && isEditing !== null) {
      inputRef.current.focus(); // Focus on the input when isEditing is not null
    }
  }, [isEditing]);

  return (
    <div className="container">
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>
            {isEditing === task.id ? (
              <>
                <input
                  ref={inputRef}
                  type="text"
                  value={updatedText}
                  onChange={(e) => setUpdatedText(e.target.value)}
                  onKeyDown={(e) => handleKeyPress(e, task)}
                  placeholder="Enter updated task"
                />
                <button className="save-btn" onClick={() => handleUpdate(task)}>Save</button>
              </>
            ) : (
              <>
                <span style={{ marginRight: '8px' }}>{task.text}</span>
                <button className="update-btn" onClick={() => handleEditClick(task)}>Update</button>
                <span style={{ marginRight: '8px' }}>{}</span>
                <button onClick={() => handleDelete(task.id)}>Delete</button>
              </>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TaskList;

/* src/App.css */

/* Global Styles */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: flex-start;
  min-height: 100vh;
  margin-top: 50px; 
}

.container {
  max-width: 800px;
  padding: 20px;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* TaskInput Component Styles */
form {
  margin-bottom: 20px;
  display: flex;
  justify-content: center;
}

input[type="text"] {
  padding: 8px;
  margin-right: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button[type="submit"] {
  padding: 8px 16px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button[type="submit"]:hover {
  background-color: #0056b3;
}

/* Update TaskList Component Styles in your CSS file */
.container {
  max-width: 800px;
  padding: 20px;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  text-align: center;
}

ul {
  list-style-type: none;
  padding: 0;
}

li {
  margin-bottom: 10px;
  display: flex;
  align-items: center; /* Align items vertically */
}

.item-number {
  margin-right: 10px; /* Adjust as needed */
  font-weight: bold; /* Optional: Make item numbers bold */
}

.item-text {
  flex: 1; /* Fill remaining space */
  margin-right: 10px; /* Add space between item text and buttons */
}

button {
  padding: 4px 8px;
  background-color: #dc3545;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 5px; /* Add space between buttons */
}

button:hover {
  background-color: #c82333;
}

/* Update button */
button.update-btn {
  padding: 4px 8px;
  background-color: #28a745; 
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button.update-btn:hover {
  background-color: #218838; 
}

/* Save button */

button.save-btn {
  padding: 4px 8px;
  background-color: #28a745; 
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button.save-btn:hover {
  background-color: #218838; 
}

/* Numbered list */
ul.numbered-list {
  counter-reset: item;
}

li::before {
  font-weight: bold;
  margin-right: 0px;
  display: inline-block;
  width: 20px;
}

@media screen and (max-width: 500px) {
  li::before {
    display: block;
    width: auto; 
    margin-bottom: 5px; 
  }
}

@media (max-width: 768px) {
  .container {
    padding: 10px;
  }

  h1 {
    font-size: 24px;
    text-align: center;
  }

  input[type="text"],
  button[type="submit"],
  button,
  button.update-btn,
  button.save-btn {
    padding: 5px 15px;
    font-size: 14px;
  }
}

footer {
  padding: 15px 15px;
  text-align: center;
  color: #0071b3;
  font-size: 0.75rem; /* Equivalent to h5 font size */
}

// 3rd

// import React from 'react';
// import TaskInput from './components/TaskInput';
// import TaskList from './components/TaskList';
// import { Provider, useSelector } from 'react-redux';
// import store from './store';
// import jsPDF from 'jspdf'; // Import jsPDF library
// import './App.css'; // Import CSS file



// const ShareButton = () => {
//   const tasks = useSelector((state) => state.tasks);
//   const generateShareLink = () => {
//     const taskTexts = tasks.map(task => task.text).join('\n');
//     const baseUrl = window.location.href.split('?')[0];
//     const encodedTasks = encodeURIComponent(JSON.stringify`Here are my tasks:\n${taskTexts}`);
//     return `${baseUrl}?tasks=${encodedTasks}`;
//   };

//   const handleCopyLink = () => {
//     const shareLink = generateShareLink();
//     navigator.clipboard.writeText(shareLink).then(() => {
//       alert('Link copied to clipboard!');
//     });
//   };

//   const handleShareLink = () => {
//     generatePDF(); // Generate PDF before sharing
//     const shareLink = generateShareLink();
//     window.open(shareLink, '_blank');
//   };

//   const generatePDF = () => {
//     const doc = new jsPDF();
//     doc.setFontSize(12);
//     doc.text("My To-Do Tasks", 10, 10);
//     tasks.forEach((task, index) => {
//       doc.text(`${index + 1}. ${task.text}`, 10, 20 + (index * 10));
//     });
//     doc.save("tasks.pdf");
//   };

//   return (
//     <div className="share-container">
//       <button className="share-btn" onClick={handleCopyLink}>Copy Link</button>
//       <button className="share-btn" onClick={handleShareLink}>Share on WhatsApp</button>
//       <button className="download-btn" onClick={generatePDF}>Download PDF</button>
//     </div>
//   );
// };

// function App() {
//   return (
//     <Provider store={store}>
//       <div className="container">
//         <h1>My To-Do Application</h1>
//         <TaskInput />
//         <TaskList />
//         <ShareButton />
//         <footer>&copy; 2024 Md Kaish. All rights reserved.</footer>
//       </div>
//     </Provider>
//   );
// }

// export default App;

// 4th
// import React, { useEffect } from 'react';
// import TaskInput from './components/TaskInput';
// import TaskList from './components/TaskList';
// import { Provider, useDispatch, useSelector } from 'react-redux';
// import store from './store';
// import { addTask } from './components/TaskAction';
// import jsPDF from 'jspdf';
// import './App.css'; // Import CSS file

// const ShareButton = () => {
//   const tasks = useSelector((state) => state.tasks);
//   const dispatch = useDispatch();

//   const generateShareLink = () => {
//     const baseUrl = window.location.href.split('?')[0];
//     return `${baseUrl}?tasks=${encodeURIComponent(JSON.stringify(tasks.map(task => task.text)))}`;
//   };

//   const handleShareLink = () => {
//     if (tasks.length === 0) {
//       alert('Please add tasks to the list before sharing...'); // Show alert if no tasks
//     } else {
//       const shareLink = generateShareLink();
//       const whatsappLink = `https://wa.me/?text=${encodeURIComponent(shareLink)}`;
//       window.open(whatsappLink, '_blank');
//     }
//   };

//   const generatePDF = () => {
//     if (tasks.length === 0) {
//       alert('Please add tasks to the list before downloading...'); // Show alert if no tasks
//     } else {
//       const doc = new jsPDF();
//       doc.setFontSize(12);
//       doc.text("My To-Do Tasks", 10, 10);
//       tasks.forEach((task, index) => {
//         doc.text(`${index + 1}. ${task.text}`, 10, 20 + (index * 10));
//       });
//       doc.save("tasks.pdf");
//     }
//   };

//   useEffect(() => {
//     const urlParams = new URLSearchParams(window.location.search);
//     const tasksParam = urlParams.get('tasks');
//     if (tasksParam) {
//       const taskTexts = JSON.parse(decodeURIComponent(tasksParam));
//       taskTexts.forEach(text => dispatch(addTask(text)));
//     }
//   }, [dispatch]);

//   return (
//     <div className="share-container">
//       <button className="share-btn" onClick={handleShareLink}>Share on WhatsApp</button>
//       <button className="download-btn" onClick={generatePDF}>Download PDF</button>
//     </div>
//   );
// };

// const App = () => {
//   return (
//     <Provider store={store}>
//       <div className="container">
//         <h1>My To-Do Application</h1>
//         <TaskInput />
//         <TaskList />
//         <ShareButton />
//         <footer>&copy; 2024 Md Kaish. All rights reserved.</footer>
//       </div>
//     </Provider>
//   );
// }

// export default App;

//1
// import React from 'react';
// import TaskInput from './components/TaskInput';
// import TaskList from './components/TaskList';
// import { Provider, useSelector } from 'react-redux';
// import store from './store';
// import './App.css'; // Import CSS file

// const ShareButton = () => {
//   const tasks = useSelector((state) => state.tasks);

//   const generateShareLink = () => {
//     const taskTexts = tasks.map(task => task.text).join('\n');
//     const encodedText = encodeURIComponent(`Here are my tasks:\n${taskTexts}`);
//     return `https://wa.me/?text=${encodedText}`;
//   };

//   const handleCopyLink = () => {
//     const shareLink = generateShareLink();
//     navigator.clipboard.writeText(shareLink).then(() => {
//       alert('Link copied to clipboard!');
//     });
//   };

//   const handleShareLink = () => {
//     const shareLink = generateShareLink();
//     window.open(shareLink, '_blank');
//   };

//   return (
//     <div className="share-container">
//       <button className="share-btn" onClick={handleCopyLink}>Copy Link</button>
//       <button className="share-btn" onClick={handleShareLink}>Share on WhatsApp</button>
//     </div>
//   );
// };

// function App() {
//   return (
//     <Provider store={store}>
//       <div className="container">
//         <h1>My To-Do Application</h1>
//         <TaskInput />
//         <TaskList />
//         <ShareButton />
//         <footer>&copy; 2024 Md Kaish. All rights reserved.</footer>
//       </div>
//     </Provider>
//   );
// }

// export default App;



one more button for sharing to the otherplarform.

import React from 'react';
import TaskInput from './components/TaskInput';
import TaskList from './components/TaskList';
import { Provider, useSelector, useDispatch } from 'react-redux';
import store from './store';
import jsPDF from 'jspdf'; // Import jsPDF library
import { clearTasks } from './components/TaskAction';
import './App.css'; // Import CSS file

const ShareButton = () => {
  const tasks = useSelector((state) => state.tasks);
  const dispatch = useDispatch();

  const generateShareLink = () => {
    const taskList = tasks.map((task, index) => `${index + 1}. ${task.text}`).join('\n');
    const encodedText = encodeURIComponent(`Here are my tasks List:\n${taskList}`);
    return `https://wa.me/?text=${encodedText}`;
  };

  const handleShareLink = () => {
    if (tasks.length === 0) {
      alert('Please add tasks to the list before sharing...');
    } else {
      const shareLink = generateShareLink();
      window.open(shareLink, '_blank');
    }
  };

  const handleShareToOtherApps = () => {
    if (tasks.length === 0) {
      alert('Please add tasks to the list before sharing...');
    } else {
      const taskList = tasks.map((task, index) => `${index + 1}. ${task.text}`).join('\n');
      if (navigator.share) {
        navigator.share({
          title: 'My To-Do List',
          text: `Here are my tasks List:\n${taskList}`,
          url: window.location.href,
        }).catch((error) => console.error('Error sharing:', error));
      } else {
        alert('Web Share API is not supported in your browser.');
      }
    }
  };

  const generatePDF = () => {
    if (tasks.length === 0) {
      alert('Please add tasks to the list before downloading...');
    } else {
      const doc = new jsPDF();
      doc.setFontSize(12);
      doc.text("My To-Do Tasks", 10, 10);
      tasks.forEach((task, index) => {
        doc.text(`${index + 1}. ${task.text}`, 10, 20 + (index * 10));
      });
      doc.save("tasks.pdf");
    }
  };

  const handleClearTasks = () => {
    if (tasks.length === 0) {
      alert('There are no tasks to clear.');
    } else if (window.confirm('Are you sure you want to clear all tasks?')) {
      dispatch(clearTasks());
    }
  };

  return (
    <div className="share-container">
      <button className="share-btn" onClick={handleShareLink}>Share on WhatsApp</button>
      <button className="share-btn" onClick={handleShareToOtherApps}>Share to Other Apps</button>
      <button className="download-btn" onClick={generatePDF}>Download PDF</button>
      <button className="clear-btn" onClick={handleClearTasks}>Clear All Tasks</button>
    </div>
  );
};

function App() {
  return (
    <Provider store={store}>
      <div className="container">
        <h1>My To-Do Application</h1>
        <TaskInput />
        <TaskList />
        <ShareButton />
        <footer>&copy; 2024 Md Kaish. All rights reserved.</footer>
      </div>
    </Provider>
  );
}

export default App;
